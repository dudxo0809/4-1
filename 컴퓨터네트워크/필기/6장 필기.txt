p. 4

Network Layer

	host에는 모든 기능이 탑재되어있어야함
	라우터에도 네트워크 시스템이 탑재되어있음
	라우터에서 알고리즘에 따라 그래프를 타고 데이터를 전송함

	Transport Layer 까지만 올려주는 일을 함

------------------------------------------------------------------------------------------------
p. 5

네트워크 계층의 핵심기능

	-> 포워딩 & 라우팅

포워딩 : 패킷을 제일 좋은 경로를 따라 라우터의 output으로 보냄
	-> 들어오고 나가는 과정에서 transmission delay가 있음
라우팅 : 테이블을 채우는 과정
	-> 자신을 소스로 보고 모든 다른 라우터들에 대해 제일 좋은 경로를 찾음
	-> 자신을 출발지, 다른 라우터를 목적지로 보고 경로찾기

------------------------------------------------------------------------------------------------
p. 6

3개의 라우터로 갈수있는 경우의 수가 있음

	-> 패킷의 헤더가 0111 : 테이블을 보니 2번 라우터에 해당됨!
	포워딩 : 테이블을 보고 매칭하는것
	라우팅 : 테이블을 채우는것


------------------------------------------------------------------------------------------------
p. 9

Virtual circuit

	-> telephone circuit같이 하나의 경로를 고정하는것
	-> 모든 라우터의 경로는 state정보를 유지한다

------------------------------------------------------------------------------------------------
p. 10

네트워크 계층에서의 데이터그램

	-> 라우터가 state정보를 유지하지 않음?



------------------------------------------------------------------------------------------------
p. 11

각 패킷은 목적지 주소를 헤더에 가진다 (address)
각 라우터는 포워딩을 위한 테이블이 존재함!

------------------------------------------------------------------------------------------------
p. 12

총 40억개의 가능한 엔트리가 있음

	-> linear하게 찾는게 아니라 일정 범위마다 나눠서 탐색
	-> 앞의 비트들은 전부 동일하고 뒤에서부터 좀 달라짐
	-> 앞에서부터 매칭되는걸 찾음

------------------------------------------------------------------------------------------------
p. 14

각 라우터는 노드, 링크는 엣지, delay와hop(통과해야하는 라우터 수)은 cost

------------------------------------------------------------------------------------------------
p. 16

라우터의 구조!

	-> input과 output 모두 여러개이다!!
	-> Switch fabric : 하드웨워
	-> Routing processor : 라우터의 프로세서

------------------------------------------------------------------------------------------------
p. 17

physical에서 비트로 바꾸고, decapsulation하고, queue에 넣고 포워딩함

	-> 여러 프레임의 신호들이 들어오면
	-> 


------------------------------------------------------------------------------------------------
p. 19

메모리, 크로스바, 버스 총 3가지의 switching fabric이 있음

메모리 : 가장 초기의 모델, 느림, R/W가 2번씩 있어 느림
버스 : 


------------------------------------------------------------------------------------------------
p. 24

인터넷 프로토콜





------------------------------------------------------------------------------------------------
p. 27

IP packet을 조각내고 다시 재조합한다

각 링크마다 MTU가 있음 : maximum transfer unit
	큰 데이터그램을 쪼개서 전송
	-> 다시 쪼개진것을 재조합 함

	쪼개진것을 재조합 하려면 ID, flag, offset등이 있어야함

offset : 원래 데이터의 어느부분부터 시작인것인지 나타냄
헤더 20제외하고 총 1480이 데이터임
flag : 1이면 뒤에 따라오는게 있다, 0이면 마지막 부분을 의미


------------------------------------------------------------------------------------------------
p. 29

IP addressing

IP 주소는 32bit이다
	-> 호스트가 아니라, 호스트나 라우터의 interface에 부여된 주소이다
	-> 각 인터페이스에 주어진 식별자!
	
DNS가 호스트네임을 인터페이스에 연결해줌
	-> DNS는 호스트의 식별자로 사용되는 name을 입력받아
	-> 주소로 변환해줌 

------------------------------------------------------------------------------------------------
p. 31

고려해야할 점들

고정된 길이의 주소로 하고, 구조를 가짐

------------------------------------------------------------------------------------------------
p. 33

32비트의 고정된 길이

	-> 총 40억개 정도의 주소가 가능
	-> 3개의 클래스로 나뉨
	-> 가장 상위 비트로 구분하고, 
	네크워크를 위한 비트수, 호스트를 위한 비트수가 달라짐

그 외에도 클래스 D, E가 있음 (flat한 구조)

------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 37







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
