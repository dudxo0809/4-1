p. 3

라우팅과 포워딩의 관계?

라우팅 : 포워딩 테이블을 채워주는것
포워딩 : 포워딩테이블의 헤더밸류-outputlink에 맞춰 링크하는것

	-> 해당 테이블은 전체경로가 아니라 1hop의 정보만 저장되어 있음
	-> 이후의 경로에 대해서는 알 수 없음
	-> 테이블을 따라 전송 : 최적의 경로를 따라 전송됨

------------------------------------------------------------------------------------------------
p. 4

네트워크의 구조를 Graph Structure에 맞게 변환시킴

	-> Graph는 Vertex와 Edge로 이루어짐
	N : 라우터의 집합 / E : 링크의 집합

	Weight를 Link의 Cost로 봄

------------------------------------------------------------------------------------------------
p. 6

라우팅 알고리즘은 크게 2가지로 나뉜다

Global vs Decentralized	

Global : 모든 라우터가 각각 전체 네트워크구조에 대한 정보를 알고 있음(Cost를)
	-> 자기 자신 라우터가 src, 다른 모든 라우터가 dst가 됨
	: link state 알고리즘이라 함 : 전체 그래프 정보를 알고있음
	ex. 다익스트라

Decentralized
	-> 라우터가 물리적으로 직접 연결이 되어있는 다른 라우터들의 Cost를 알고있음
	-> Iterative or info-exchange를 통해 Cost 계산을 진행
	: distance vector 알고리즘이라 함 : 분산 처리

둘 모두 Dynamic한 방식 : 라우터의 상태 or 네트워크 상태가 빠르게 변함
	-> static 은 변화가 적고 느림

------------------------------------------------------------------------------------------------
p. 7

Link-State Routing Algorithm

	-> 가장 대표적인 알고리즘으로 다익스트라가 있음
		-> 전체 네트워크 구조를 각 라우터가 가짐
		-> 이를 통해 서로 메시지를 주고받음 (Link state message)

	-> Router가 주변 라우터의 정보(cost)를 Broadcast함
	-> 이를 모아 전체 네트워크 정보를 얻음 (모든 라우터가 같은 정보를 가짐)
	-> 자기자신으로부터 다른 모들 라우터까지의 최단경로
		-> 해당 경로가 Forwarding Table에 저장됨

Notation

	c : 링크의 cost ; 직접적인 링크가 없다면 infinite한 값
	D(v) : src부터 dst까지의 현재 cost값의 합(path) ; 더 바뀔 수 있음
	p(v) : 바로 이전에 거쳐간 노드(라우터)
	N' : 현재까지 최단경로가 찾아진 노드의 집합; 집합의 원소는 바뀔 수 있음 

------------------------------------------------------------------------------------------------
p. 8

다익스트라 알고리즘

초기화>
	최단경로는 src만 포함
	모든 노드에 대해 최단경로의 cost는 Link의 cost로 초기화
		-> 링크가 없다면? path의 cost는 infinite
	
반복>
	최소 D(v) : 바로 link를 타고 가는것과, 다른 node를 한번 거쳐 가는것을 비교
		-> 더 작은 cost를 찾고 N'을 업데이트함
		-> 모든 노드가 N'에 포함될 때 까지 반복

------------------------------------------------------------------------------------------------
p. 9

알고리즘 과정

위의 과정을 통해 Forwarding Table에 p.10의 결과가 저장됨
	-> 강의자료의 표는 u라우터의 예시


------------------------------------------------------------------------------------------------
p. 11

N개의 노드라면 : O(N^2)의 복잡도를 가짐





------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
