p. 2

이번장에서는 응용계층에 대해 설명한다





------------------------------------------------------------------------------------------------
p. 4

네트워크앱은 2가지로 나뉘어 만들어져야한다.

	-> 네트워크 코어에서는 패킷을 전달하는것 말고는 다른기능이 없다
	-> 브라우저와 웹서버에서 프로그램의 대부분을 차지



------------------------------------------------------------------------------------------------
p. 5

서버
	-> 호스트, 고정 IP, 물리적 서버를 여러개 운영함(서버가 복제된 형태)

클라이언트
	-> 서버와 통신, IP가 바뀔수있음
	-> 클라이언트끼리 통신하지 않음



------------------------------------------------------------------------------------------------
p. 7

프로세스간의 통신

	프로세스 : 호스트에서 수행되는 중인 프로그램
	inter-process communication : 같은 호스트 안에서도 프로세스끼리 통신을 할 수 있다
	message exchange : 서로 다른 호스트에서의 프로세스끼리의 통신

	P2P는 클라이언트 기능과 서버기능 모두 탑재를 해야한다

------------------------------------------------------------------------------------------------
p. 8

소켓

프로세스는 소켓을 통해 메시지를 전송하고 받는다
	-> 소켓에 연결된 데이터는 알아서 이어진 소켓으로 전송된다

	API
	-> transport 프로토콜을 선택하는 함수 (TCP, UDP 등)
	-> 몇몇 파라미터를 설정하는 함수

	순서)
	1. 응용 프로세스에서 소켓의 함수를 호출함
	2. 소켓을 통해 메시지가 전달됨 (TCP는 OS에 탑재됨)
	3. 인터넷을따라 소켓을 통해 상대방에게 전달됨


------------------------------------------------------------------------------------------------
p. 9

Addressing Process

	-> 호스트는 자기자신만의 32bit IP주소를 가지고 있다.
		-> 그러나 주소만 가지고 있으면 안된다!
		-> 인터넷을 따라 오는건 IP주소 하나면 되지만
		-> 어떤 프로세스에 전달할지는 port number에 따라 정해진다

	Port number : 호스트의 프로세스와 관련!
	well-known port number : 인터넷 표준으로 정해진 포트넘버가 있음

	메시지를 교환하기 위해선 IP주소와 port넘버가 필요하다


------------------------------------------------------------------------------------------------
p. 10

App Layer의 프로토콜

	-> 메시지를 정의한다
		-> 메시지의 종류와 메시지의 필드를 정의함
		-> 언제 어떤 메시지를 전송하고 교환하는지, 응답으로는 어떤 메시지를 전달하는지
	Public domain protocols 
		-> RFC문서에 정의됨, 연동에 주안점을 둠, HTTP, SMTP (공익적인 목적에 초점을 둠)
	Proprietary protocols
		-> 기업이 이윤을 추구하기 위해 만듬, Skype

------------------------------------------------------------------------------------------------
p. 11

응용계층에서의 Transport service는 무엇을 할까???

	-> 응용계층은 transport 계층의 기능을 가져다 씀
	-> Data Integrity : 데이터의 전송에 오류가 있어도 되는지 아닌지 (데이터의 무결성)
		-> TCP는 오류가 발생하지 않는 서비스임(발생해도 다 복구해줌)
		-> ex.) 오디오는 오류가 조금 있어도됨 , 은행서비스는 오류가 있으면 안됨!
	-> Throughput : 전송속도
		-> 일부 app은 약간의 오류가 있어도 throughput이 더 중요하다 (스트리밍 등)
		-> email등은 throughput보다 데이터가 오류없이 전송되는것이 더 중요하다
	-> Timing : 시간차
		-> throughput은 일부 시간차가 있더라도 많은 양의 데이터가 빠르게 전달이지만
		-> 타이밍은 반응속도가 중요함 (ex. 실시간 FPS게임, 전화 등)

	응용서비스가 무엇이냐에 따라 위 세가지 서비스의 중요도가 달라질 수 있다.


------------------------------------------------------------------------------------------------
p. 13

인터넷 전송 프로토콜 서비스

	TCP
		-> 오류가 없음, 병목현상, 타이밍 기능x, 최저속도 보장x, 보안x, 
		-> 연결 지향형 (가상의 파이프를 만듬) : 

	UDP
		-> 로스, 오류가 발생할 수 있음
		-> 연결셋업없고, 속도조절 없음, 기능이 단순하고 동작속도가 빠름


	왜 둘다있는가? 서로 목적에 따라 쓰임이 다르기때문


------------------------------------------------------------------------------------------------
p. 15

Securing TCP

TCP & UDP에는 기본적으로 보안이없으므로 이를 보완하기 위해 개발된것
	-> 패킷에는 clear text로 전송됨

	SSL : 암호화기능(encryption)을 추가한것 (Secure Socket Layer)
		-> 데이터 무결성을 가짐, 양단에서 인증을 거침
		-> SSL은 응용계층에 있음


------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
p. 







------------------------------------------------------------------------------------------------
