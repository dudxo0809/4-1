p. 2, 3

선형방정식을 어떻게 푸는가?

	-> 선형대수학의 주요 문제임
	-> 벡터로 풀어보자
	-> 챕터2 에서는 벡터로 Linear equation을 푸는 방법론에 대해 배운다.




------------------------------------------------------------------------------------------------------------------------

p. 5

3개의 3차원 방정식을 벡터로 표현

	-> 각 벡터의 스칼라곱을해서 더하면 된다.
	-> 벡터로 표현해서 해를 찾을 수 있다.





------------------------------------------------------------------------------------------------------------------------

p. 7

곧 나올 매트랩 과제

	-> 매트릭스 연산을 위한 프로그램
	-> 나중에 참고하기





------------------------------------------------------------------------------------------------------------------------

p. 8, 9

소거법을 벡터로 표현??

pivot
	-> 첫번째 방정식에서 소거하려는 미지수(x)의 계수

multiplier
	-> 소거를 위해 equation에 곱해지는 상수

소거를 할때 반드시 pivot에 multiplier를 곱한 식을 빼야한다


------------------------------------------------------------------------------------------------------------------------

p. 11

ex.1) pivot은 1, multiplier는 3이다.
	-> 이렇게 하면 두번째 pivot은 0이 됨!! -> 말이안되는 y값이나옴
	-> n개의 equation의 해를 구하려면
		-> n개의 pivot이 모두 0이면 안된다!!

ex.2) 무수히 많은 해가 생김

두 경우 모두 두번째 pivot이 0이되었음
	-> non-zero인 pivot이 한개밖에 없기 때문에 해가 없거나 무수히 많다.
	-> 이를 elimination을 통해 미리 찾아낼 수 있다.

	-> 만약 n이 100개? 200개? 라면??
		-> 100개의 미지수에대해 일일히 방정식을 풀 수 는 없음 ㅜㅜ
		-> 추후 프로그램으로 계산하는 과제가 나올것
			-> non-zero인 pivot이 몇개인지 확인하는...

	-> 애초에 pivot이 0이면 pivot이라고 표현하지 않음!!!

------------------------------------------------------------------------------------------------------------------------

p. 12

singular : n개의 equation에서 pivot이 n개보다 적은것
	-> 완벽하게 풀 수 없음

non-singular : n개의 equation에서 pivot이 n개 나온것
	-> 완벽하게 풀 수 있음


------------------------------------------------------------------------------------------------------------------------

p. 13

첫번째-두번째) pivot은 2, multiplier는 2
첫번째-세번째) pivot은 2, multiplier는 -1







------------------------------------------------------------------------------------------------------------------------

p. 16

한번의 Elimination과정을 matrix로 정의하자

	-> Elimination matrix를 곱해 소거의 과정을 대신한다
	-> 다음 Elimination은? (1번째와 3번째)

	-> 2번째 소거는 3행1열에 multiplier가 붙음



------------------------------------------------------------------------------------------------------------------------

p. 19

Matlab을 이용한 elimination과정
과정 잘 살펴보고 이해할것


------------------------------------------------------------------------------------------------------------------------

p. 21

Row Exchange

	-> 행을 바꾼다?
	-> Permutation matrix는 열을 바꾸는 행렬이다.
	
	-> 계산의 편의성을 위해 row exchange를 한다.
	-> permutation matrix의 곱으로 row  exchange를 진행!

	-> How?
	-> 기본적으로 Identity matrix에서 시작함
	-> Identity matrix에서 바꿀 equation의 row를 바꿔주면
		-> permutation matrix가 된다!!!

------------------------------------------------------------------------------------------------------------------------

p. 22

Augmented Matrix

	-> Ax=b 를 구할때 
	-> 양변에 행렬을 곱한다
	-> 이를 한번만 곱하기 위해 A와 b를 합친다!


------------------------------------------------------------------------------------------------------------------------

p. 24

두 행렬을 곱할때

	A*B
	-> A의 열과 B의 행의 갯수는 반드시 같아야한다. 

------------------------------------------------------------------------------------------------------------------------
p. 26

Block Matrix

	-> 큰 사이즈의 행렬을 나눌 수 있다.


------------------------------------------------------------------------------------------------------------------------
p. 27

행렬의 곱을 Linear combination으로 표현


p. 28

역행렬은 곱해서 단위행렬이 되는 행렬

특징
	1. n개의 피벗이 있어야함
	2. 단 하나의 역행렬만 존재
	3. 역행렬이 있다면, 양변에 역행렬을 곱해 해를 구할 수 있다
	4. x가 0벡터가 아니어야 역행렬이 존재한다
	5. 2x2행렬의 역행렬 공식
	6. 대각선 행렬의 역행렬

---------------------------------------------------------------------------------
p. 30

Elimination matrix : upper triagle을 만들기 위한 matrix
	
	elimination matrix의 역행렬?
	-> 강의자료에서 처럼 5앞에 -를 붙이기만 하면 된다!!

	-> FE와 FE의 역행렬 주의깊게 볼것

---------------------------------------------------------------------------------
p. 31

Augmented matrix

	-> 3개의 방정식을 묶어 Ax=b의 행렬 연산식으로 표현함
	-> 이제 A와 b를 같이 붙인것을 augmented matrix라고 함
		-> augmented matrix를 만드는이유 : 행렬연산의 효율때문
		-> 좌변에 곱할때는 우변에도 곱해야함
			-> 두번곱할거 한번만 하자!

	-> C [A b] = [CA Cb]
	-> 사실 computational한 효율이 증가하지는 않는다


Gauss-Jordan 소거법???

	-> K matrix에 대한 Inverse matrix를 구해보자!
	KX = b일때
	X가 K의 역행렬이라면?

	-> KX = I에서의 Augmented matrix를 만들면 [K I]
	-> IX = K^-1 에서의 Augmented matrix는 [I K^-1] 이 된다!
	-> 따라서 우리는 [K I] 에서 [I K^-1] 를 만들어야함!!
		-> 이것이 Gauss-Jordan 소거법!

---------------------------------------------------------------------------------
p. 32

가우스 조던 소거법의 과정!

	-> augmented에서 왼쪽 부분을 Identity의 모양과 비슷하게 만들어야함
	-> off-diagonal을 하나씩 0으로 만듬
	-> 이전의 소거법과 다른점은 upper triangle을 만드는게아니라
		diagonal만 남기고 나머지는 모두 0으로 만든다는것
	-> diagonal만 남았다면 모두 1이 되도록 각 equation에 값을 곱함

	-> 모든 과정을 마쳤다면 [I K] 의 형태인 augmeted matrix가 됨!
	-> KX=I에서 IX=K^-1으로의 변환이 완료!

	가우스조더소거법으로 역행렬을 찾았다

---------------------------------------------------------------------------------
p. 34

A=LU Factorization

	Elimination = Factorization?
	-> 선형대수학의 많은 key는 factorization이다!
	
	-> Ax=b를 풀기위해 A를 factorization한다??
	-> A 행렬을 L과 U라는 행렬로 나눠서 접근한다
		-> L과 U라는 triangulat matrix로 분해
		-> L은 lower, U는 upper triangulat matrix임
	L은 multiplier로 이루어진 행렬
		-> 
	U는
		-> Elimination Matrix를 곱해 나온 행렬

	A=LU이기 때문에 L은 E21A=U에서 L은 E21^-1이다 (2x2에서)


---------------------------------------------------------------------------------
p. 37

이 A=LU로 factorization을 하는 이유는 결론적으로 linear equation을 풀기위함

	-> Ax=b 를 LU=b의 형태로 바꿨음
	-> 여기서 b를 b=LC의 형태로 바꾸면??
	-> LUx=Lc에서 => Ux=c 의 형태로 나타낼 수 있다!

	-> L의 역행렬은 반드시 존재한다!
	-> Ux=c에서 x는 매우 쉽게 구할 수 있다!



---------------------------------------------------------------------------------
p. 38

Foward backward 방법

	-> LC=b를 찾고, Ux=c를 푼다!




---------------------------------------------------------------------------------
p. 43

대칭행렬

	-> diagonal을 기준으로 대칭인 행렬
	-> A^T = A임


---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






---------------------------------------------------------------------------------
p. 






